<fieldset class="p-4">
    <button
      type="button"
      class="inline-flex h-full justify-center rounded-3xl rounded-bl-md bg-white p-3 text-sm font-medium text-gray-700 outline-none hover:bg-gray-50 focus:outline-none"
      id="filter-button">
      <img class="mr-2 h-4 w-4" src="/img/filter.svg" alt="expand menu">
      <legend>Filter</legend>
    </button>
    <div id="filter-options" class="grid md:grid grid-rows-2 grid-cols-3 h-24 mt-2 items-stretch gap-2">
        <label class="container rounded-md bg-white row-span-2" for="all-filter">
            All
            <input type="radio" checked name="filter" value="" id="all-filter">
            <span class="checkmark"></span>
        </label>
        <label class="container rounded-md bg-white col-span-2" for="standard-filter">
            Standard
            <input type="radio" value="false" name="filter" id="standard-filter">
            <span class="checkmark"></span>
        </label>
        <label class="container rounded-md bg-white col-span-2" for="non-standard-filter">
            Non Standard
            <input type="radio" value="true" name="filter" id="non-standard-filter">
            <span class="checkmark"></span>
        </label>
    </div>
</fieldset>

<script>
  const filterButton = document.querySelector(
      "#filter-button"
  ) as HTMLButtonElement;
  const filterOptions = document.querySelector(
      "#filter-options"
  ) as HTMLDivElement;

  filterButton.addEventListener("click", (event) => {
    filterOptions.classList.toggle("hidden");
    filterOptions.classList.toggle("md:hidden");
  });

  const filterInput = document.querySelector("fieldset") as HTMLFieldSetElement;

  const cardAttribute = document.querySelectorAll(".symbol-info") as NodeListOf<HTMLSpanElement>;

  filterInput.addEventListener("input", (event) => {
      const target = event.target as HTMLInputElement;
      const isLegacy = target.value;
      cardAttribute.forEach((element) => {
          const isVisible = !isLegacy || element.textContent?.toString() == isLegacy;
          element.parentElement!.classList.toggle("hidden", !isVisible);
      });
  });
</script>

<style>
    /* The container */
.container {
  display: flex;
  position: relative;
  padding-left: 35px;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

/* Hide the browser's default radio button */
.container input {
  position: absolute;
  opacity: 0;
  cursor: pointer;
}

/* Create a custom radio button */
.checkmark {
  position: absolute;
  left: 0.7rem;
  height: 25px;
  width: 25px;
  background-color: #eee;
  border-radius: 50%;
}

/* On mouse-over, add a grey background color */
.container:hover input ~ .checkmark {
  background-color: #ccc;
}

/* When the radio button is checked, add a blue background */
.container input:checked ~ .checkmark {
  background-color: #2196F3;
}

/* Create the indicator (the dot/circle - hidden when not checked) */
.checkmark:after {
  content: "";
  position: absolute;
  display: none;
}

/* Show the indicator (dot/circle) when checked */
.container input:checked ~ .checkmark:after {
  display: block;
}

/* Style the indicator (dot/circle) */
.container .checkmark:after {
 	top: 9px;
	left: 9px;
	width: 8px;
	height: 8px;
	border-radius: 50%;
	background: white;
}
</style>
