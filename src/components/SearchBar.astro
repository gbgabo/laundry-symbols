---
export interface Props {
    current: string;
    prompt: string;
    languages: {
        slug: string;
        emoji: string;
    }[];
}

const { current, languages, prompt = "Search" } = Astro.props;

const index = languages.findIndex((lang) => lang.slug === current);
const [currentLanguage] = languages.splice(index, 1);
---

<div class="fixed top-3 flex w-full text-gray-600 z-10">
    <div class="flex w-full max-w-xl gap-2 px-4">
        <div class="absolute top-0 mt-4 ml-4">
            <svg
                class="h-4 w-4 fill-current"
                xmlns="http://www.w3.org/2000/svg"
                xmlns:xlink="http://www.w3.org/1999/xlink"
                version="1.1"
                id="Capa_1"
                x="0px"
                y="0px"
                viewBox="0 0 56.966 56.966"
                style="enable-background:new 0 0 56.966 56.966;"
                xml:space="preserve"
                width="512px"
                height="512px"
            >
                <path
                    d="M55.146,51.887L41.588,37.786c3.486-4.144,5.396-9.358,5.396-14.786c0-12.682-10.318-23-23-23s-23,10.318-23,23  s10.318,23,23,23c4.761,0,9.298-1.436,13.177-4.162l13.661,14.208c0.571,0.593,1.339,0.92,2.162,0.92  c0.779,0,1.518-0.297,2.079-0.837C56.255,54.982,56.293,53.08,55.146,51.887z M23.984,6c9.374,0,17,7.626,17,17s-7.626,17-17,17  s-17-7.626-17-17S14.61,6,23.984,6z"
                ></path>
            </svg>
        </div>
        <input
            type="search"
            name="query"
            id="search-query"
            placeholder={prompt}
            class="h-12 w-full grow rounded-full bg-white px-5 pl-10 text-sm shadow-md focus:outline-none"
        />
        <div id="language-menu" class="relative inline-block text-left">
            <button
                type="button"
                class="inline-flex h-12 w-20 justify-center rounded-full bg-white p-3 text-sm font-medium text-gray-700 shadow-md outline-none hover:bg-gray-50 focus:outline-none"
                id="language-button"
                aria-expanded="true"
                aria-haspopup="true"
            >
                {currentLanguage.emoji}
                <svg
                    class="-mr-1 ml-2 h-5 w-5"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                    aria-hidden="true"
                >
                    <path
                        fill-rule="evenodd"
                        d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
                        clip-rule="evenodd"></path>
                </svg>
            </button>
            <div id="language-options" class="hidden">
                {
                    languages.map((language) => {
                        return (
                            <div
                                class="mt-2 flex h-12 w-20 justify-center rounded-full bg-white p-3 text-sm font-medium text-gray-700 shadow-md outline-none hover:bg-gray-50 focus:outline-none"
                                role="menu"
                                aria-orientation="vertical"
                                aria-labelledby="menu-button"
                                tabindex="-1"
                            >
                                <a
                                    href={language.slug}
                                    class="block px-4 text-sm text-gray-700"
                                    role="menuitem"
                                    tabindex="-1"
                                    id="menu-item-0"
                                >
                                    {language.emoji}
                                </a>
                            </div>
                        );
                    })
                }
            </div>
        </div>
    </div>
</div>

<script>
    const searchInput = document.querySelector(
        "#search-query"
    ) as HTMLInputElement;
    const symbols = document.querySelectorAll(
        ".symbol-title"
    ) as NodeListOf<HTMLHeadingElement>;

    searchInput.addEventListener("input", (event) => {
        const target = event.target as HTMLInputElement;
        const value = target.value.toLowerCase();
        symbols.forEach((element) => {
            const isVisible = element
                .textContent!.toLowerCase()
                .includes(value);
            element.parentElement!.classList.toggle("hidden", !isVisible);
        });
    });

    const languageMenu = document.querySelector(
        "#language-menu"
    ) as HTMLDivElement;
    const languageButton = document.querySelector(
        "#language-button"
    ) as HTMLButtonElement;
    const languageOptions = document.querySelector(
        "#language-options"
    ) as HTMLDivElement;

    languageButton.addEventListener("click", (event) => {
        languageOptions.classList.toggle("hidden");
    });

    languageMenu.addEventListener("mouseleave", (event) => {
        languageOptions.classList.add("hidden");
    });
</script>
